// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MANAGER
}


model Admin {
  id         Int     @id @default(autoincrement())
  full_name  String
  phone      String
  email      String
  password   String
  is_creator Boolean

  @@map("admin")
}

model District {
  id       Int      @id @default(autoincrement())
  name     String
  regional Int
  regions  Region[]
  firms    Firm[]

  @@map("district")
}

model Region {
  id        Int        @id @default(autoincrement())
  name      String
  districts District[]
  firms     Firm[]

  @@map("region")
}

model Car {
  id               Int              @id @default(autoincrement())
  jails_number     String
  vn_number        String
  model            String
  year             Int
  current_owner_id Int
  history          CarHistory[]
  accidents        CarAccident[]
  services         ServicesForCar[]

  @@map("car")
}

model CarHistory {
  id        Int      @id @default(autoincrement())
  car_id    Int
  car       Car      @relation(fields: [car_id], references: [id])
  owner_id  Int
  buyout_id Int
  sold_at   DateTime

  @@map("car_history")
}

model FirmWorkers {
  id            Int            @id @default(autoincrement())
  worker_id     Int
  worker        Worker         @relation(fields: [worker_id], references: [id])
  firm_services FirmServices[]

  @@map("firm_workers")
}

model FirmServices {
  id            Int           @id @default(autoincrement())
  firm_id       Int
  firm          Firm          @relation(fields: [firm_id], references: [id])
  name          String
  description   String?
  price         Float
  is_active     Boolean       @default(true)
  items         ServiceItem[]
  payments      Payment[]
  FirmWorkers   FirmWorkers?  @relation(fields: [firmWorkersId], references: [id])
  firmWorkersId Int?
  CarAccident   CarAccident[]

  @@map("firm_services")
}

model CarAccident {
  id           Int           @id @default(autoincrement())
  car_id       Int
  car          Car           @relation(fields: [car_id], references: [id])
  date         DateTime
  description  String
  damage_level String
  is_repaired  Boolean       @default(false)
  service_id   Int?
  service      FirmServices? @relation(fields: [service_id], references: [id])

  @@map("car_accident")
}

model User {
  id                  Int       @id @default(autoincrement())
  full_name           String
  phone               String?
  email               String
  isActivated         Boolean   @default(false)
  activationLink      String?
  is_approved         Boolean   @default(false)
  role                Role      @default(USER)
  hashedRefreshToken  String?
  workers             Worker[]
  payments            Payment[]
  reviews             Review[]
  firms               Firm[]    @relation("FirmOwner")

  @@map("user")
}

model Worker {
  id          Int           @id @default(autoincrement())
  userid      Int
  user        User          @relation(fields: [userid], references: [id])
  firmid      Int
  firm        Firm          @relation(fields: [firmid], references: [id])
  firmWorkers FirmWorkers[]

  @@map("worker")
}

model ServicesForCar {
  id          Int      @id @default(autoincrement())
  car_id      Int
  car         Car      @relation(fields: [car_id], references: [id])
  firm_id     Int
  firm        Firm     @relation(fields: [firm_id], references: [id])
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])
  description String?
  mileage     Float
  cost        Float

  @@map("services_for_car")
}

model Payment {
  id         Int          @id @default(autoincrement())
  service_id Int
  service    FirmServices @relation(fields: [service_id], references: [id])
  user_id    Int
  user       User         @relation(fields: [user_id], references: [id])
  amount     Float
  method     String
  status     String

  @@map("payment")
}

model Category {
  id       Int              @id @default(autoincrement())
  name     String
  services ServicesForCar[]

  @@map("category")
}

model ServiceItem {
  id         Int          @id @default(autoincrement())
  service_id Int
  service    FirmServices @relation(fields: [service_id], references: [id])
  the        String?
  part_used  String?
  cost       Float

  @@map("service_item")
}

model Firm {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  location       String
  region_id      Int
  region         Region           @relation(fields: [region_id], references: [id])
  district_id    Int
  district       District         @relation(fields: [district_id], references: [id])
  owner_id       Int
  owner          User             @relation(fields: [owner_id], references: [id], name: "FirmOwner")
  is_active      Boolean          @default(true)
  phone_number   String
  services       FirmServices[]
  workers        Worker[]
  images         Image[]
  reviews        Review[]
  ServicesForCar ServicesForCar[]

  @@map("firm")
}

model Image {
  id        Int    @id @default(autoincrement())
  firm_id   Int
  firm      Firm   @relation(fields: [firm_id], references: [id])
  image_url String

  @@map("image")
}

model Review {
  id      Int     @id @default(autoincrement())
  firm_id Int
  firm    Firm    @relation(fields: [firm_id], references: [id])
  user_id Int
  user    User    @relation(fields: [user_id], references: [id])
  rating  Int
  comment String?

  @@map("review")
}
